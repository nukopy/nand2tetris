// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // ------------------------------------------------------------
    // address の計算
    // ------------------------------------------------------------

    // ------------------
    // for RAM16K
    // ------------------

    // address の評価: address と 16,384 との比較
    // address + (-16384) をしたときにマイナスになるかどうかを計算する
    // マイナスになれば、0 <= address <= 16383 が決定し、RAM16K のアドレスだということが分かる
    Add16(
        a[15]=false,
        a[0..14]=address,
        //  16,384 = 0100_0000_0000_0000 = 2^14
        // -16,384 = 1100_0000_0000_0000 (2 の補数表現)
        b[15]=true,
        b[14]=true,
        b[13]=false,
        b[12]=false,
        b[11]=false,
        b[10]=false,
        b[9]=false,
        b[8]=false,
        b[7]=false,
        b[6]=false,
        b[5]=false,
        b[4]=false,
        b[3]=false,
        b[2]=false,
        b[1]=false,
        b[0]=false,
        out[15]=isNegativeAddressMinus16384,
        out[15]=selectorRam16K,
        out[13..14]=noop, // この範囲は使用しない
        // address - 16,384 の計算は、アドレス空間 16,384 ~ 24,575 -> 0 ~ 8,191 へのマッピングなので、そのまま Screen のアドレスに使用できる
        out[0..12]=addressScreen
    );

    // selector の計算
    // address - 16,384 がマイナスであれば、address 範囲は 0 < address <= 16,384 であり、
    // address RAM16K のアドレス空間内であることが分かる
    // つまり isNegativeAddressMinus16384 は RAM16K のセレクタに等しい

    // loader の計算
    And(a=selectorRam16K, b=load, out=loaderRam16K);

    // ------------------
    // for Screen
    // ------------------

    // address の評価: address と 16,384 との比較
    // address - 16,384 がマイナスでないということは、16,384 <= address となる
    // GE: greather than or equal to ~
    Not(in=isNegativeAddressMinus16384, out=isGE16384);

    // address の評価: address と 24,576 との比較
    // address + (-24,576) をしたときにマイナスになるかどうかを計算する
    // マイナスになれば、address <= 24575 が決定し、
    // isGE16384 と合わせての address 範囲が 16,384 <= address <= 24,575 の判定ができる
    // LE: less than equal to ~
    Add16(
        a[15]=false,
        a[0..14]=address,
        //  24,576 = 2^14 + 2^13 = 16,384 + 8,192 = 0110_0000_0000_0000
        // -24,576 = 1010_0000_0000_0000 (2 の補数表現)
        b[15]=true,
        b[14]=false,
        b[13]=true,
        b[12]=false,
        b[11]=false,
        b[10]=false,
        b[9]=false,
        b[8]=false,
        b[7]=false,
        b[6]=false,
        b[5]=false,
        b[4]=false,
        b[3]=false,
        b[2]=false,
        b[1]=false,
        b[0]=false,
        out[15]=isNegativeAddressMinus24576,
        out[15]=isLE24575, // 24576 - 1
        out[8..15]=addressMinus24576Second,
        out[0..7]=addressMinus24576First
    );

    // アドレス範囲の判定：16384 <= address <= 24575
    And(a=isGE16384, b=isLE24575, out=selectorScreen);

    // loader の計算
    And(a=selectorScreen, b=load, out=loaderScreen);

    // ------------------
    // for Keyboard
    // ------------------

    // 入力
    // Keyboard チップのデータの更新は別の更新ロジックで回っているので、in, address を直接的に受け取るバスは存在しない

    // address の評価: address と 24,576 との比較
    // address + (-24576) == 0 なら keyboard が選択される
    // 「KBD - 24576 の計算結果が 1 つでも bit が立ってたら 0 でない」= KBD じゃない
    Or8Way(in=addressMinus24576Second, out=isContainOne1);
    Or8Way(in=addressMinus24576First, out=isContainOne2);
    Or(a=isContainOne1, b=isContainOne2, out=isNotZeroAddressMinus24576);
    // 計算結果が 0 なら address == 24576 なので、isNotZero の否定は Keyboard 入力のセレクタとなる
    Not(in=isNotZeroAddressMinus24576, out=selectorKeyboard);

    // loader の計算
    And(a=selectorKeyboard, b=load, out=loaderKeyboard);

    // ------------------------------------------------------------
    // load, address を受け取り出力
    // ------------------------------------------------------------

    // if (0 <= address <= 16,383) RAM16K へ load & out
    // else if (16,384 <= address <= 24575) Screen へ load & out
    // else if (address == 24576) Keyboard へ load & out
    RAM16K(in=in, load=loaderRam16K, address=address[0..13], out=outRam16K);
    Screen(in=in, load=loaderScreen, address=addressScreen, out=outScreen);
    Keyboard(out=outKeyboard);

    // 無効な出力 outZero (0 でいいのかはわからんが。「無効」が何を意味するのか仕様に書いてなかった。)
    Not16(
        in[15]=true,
        in[14]=true,
        in[13]=true,
        in[12]=true,
        in[11]=true,
        in[10]=true,
        in[9]=true,
        in[8]=true,
        in[7]=true,
        in[6]=true,
        in[5]=true,
        in[4]=true,
        in[3]=true,
        in[2]=true,
        in[1]=true,
        in[0]=true,
        out=outZero
    );

    // 出力
    // 出力は loader ではなく selector。load の値に関係なく、アドレス指定によって出力を変更する。
    Or(a=selectorRam16K, b=selectorScreen, out=sel1);
    Or(a=selectorRam16K, b=selectorKeyboard, out=sel0);
    Mux4Way16(
        a=outZero,
        b=outKeyboard,
        c=outScreen,
        d=outRam16K,
        sel[1]=sel1,
        sel[0]=sel0,
        out=out
    );
}
